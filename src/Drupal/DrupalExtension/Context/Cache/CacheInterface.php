<?php

namespace Drupal\DrupalExtension\Context\Cache;

use Drupal\DrupalExtension\Context\RawDrupalContext as Context;

/**
 * The base implementation for DrupalContext Caching.
 *
 * A simple class to store cached copies of created Drupal items,
 *  with indexing.  Note: not all interface methods are implemented!  It
 *  is up to the subclass to fill in the blanks.
 */
interface CacheInterface {

  /**
   * Adds a value to the cache.
   *
   * The value will be indexed by
   * whatever field the class sets for $primary_key (class property,
   * as well as any other fields established prior to the add call
   * via addIndices().
   *
   * @param string $index
   *   The unique index to store the value under.
   * @param mixed $value
   *   The value to store.
   */
  public function add($index, $value = NULL);

  /**
   * Adds indices to the given cache.
   *
   * Adds an index to a given cache to speed searching by a particular
   * mechanism.  Any content subsequently added to this cache will be
   * indexed by the provided property in addition to its main index.
   * If an index is established, and an object is passed that does not
   * contain the index as one of its properties, it should throw
   * an exception.  Note that values to these indices are not required to
   * be unique.
   *
   * This method takes one or more string arguments.  These should be
   * the names of the indices to add.
   */
  public function addIndices();

  /**
   * Cleans the drupal test database.
   *
   * Purges stored items from the test database.  WARNING: this does not
   * necessarily include all items created during the testing process,
   * especially ones created as a side effect to Mink ui clicking operations
   * that the test suite could not know about.  It also does not do
   * proper cleanup in the event of a fatal php exception or CLI interrupt.
   *
   * @param Context $context
   *   The currently executing context.
   *
   * @throws \Exception
   *   If any kind of error occurred during purging.
   */
  public function clean(Context &$context);

  /**
   * Provides a count of items in this cache.
   *
   * @return int
   *   The number of items.
   */
  public function count();

  /**
   * Deletes the field value for a given alias.
   *
   * @param string $key
   *   The unique index of the item to delete.
   * @param string $field
   *   The name?
   * @param Context $context
   *   The context object calling this function.
   */
  public function deleteValue($key, $field, Context &$context);

  /**
   * Returns whether or not the named key exists.

   * @param string $key
   *   The unique index of the item.
   * @param Context $context
   *   The context object calling this function.
   *
   * @return bool
   *   TRUE if the item exists, FALSE otherwise.
   */
  public function exists($key, Context &$context);

  /**
   * Finds an item in the cache that matches the described set of options.
   *
   * At a minimum, this should look at: a) The key generated by a serialization
   * of the options array b) Any indices that can be determined by specific
   * keys in the values array that match an implementing subclass' index list.
   *
   * @param array $values
   *   An array of key/value pairs describing how to create
   *   an item of the type managed by the cache.
   * @param Context $context
   *   The context calling the function.  Used for
   *   version-specific loading.
   *
   * @return mixed
   *   An item of the type managed by the implementing subclass, or NULL
   *   if no such item was found.
   */
  public function find(array $values, Context &$context);

  /**
   * Retrieves the cached value, if it exists.
   *
   * The passed key must be one of the indexed keys the item is stored under.
   *
   * @param string $key
   *   The key the item is stored under.   *.
   * @param Context $context
   *   The context calling the function.  Used for version-specific loading.
   *
   * @return (mixed)
   *         Either the appropriate value for whatever type of
   *         cache is implementing this interface, or NULL if no
   *         such value is found.
   */
  public function get($key, Context &$context);

  /**
   * Returns the type of entity managed by this cache.
   *
   * @return string
   *   The entity type stored by this cache, or FALSE if the cache stores
   *   something other than entities.
   */
  public function getEntityType();

  /**
   * Returns the item found at the named index.
   *
   * An index is different than an alias - indices are defined upon cache
   * creation, and are populated automatically when new items are added.  For
   * example, a user index might be 'name', in which case the user cache would
   * need to capture the value of 'name' and store it referencing the user id.
   *
   * Example usage: `getIndex('name', 'Fred')`
   *
   * @param string $index_name
   *   A known named index items in this cache are stored under.
   * @param string $index_key
   *   The value of the index key to search.
   *
   * @return array
   *   An array of items stored at the index, or NULL if there was no entry
   *   with value $k within the given index.
   *
   * @throws \Exception
   *   If the named index is not valid (which should be known before runtime).
   */
  public function getIndex($index_name, $index_key);

  /**
   * Provides a list of additional indices assigned to this cache.
   *
   * When an item is cached in this class, it is often indexed
   * by additional keys to aid in easy retrieval for different
   * scenarios.  This method returns a list of indices that
   * may be used for searching.
   *
   * @return array
   *   An array of string indices.
   */
  public function getNamedIndices();

  /**
   * Returns the value for a field from a given alias.
   */
  public function getValue($key, $field, Context &$context);

  /**
   * Removes the object identified by the key $key from the cache.
   *
   * Note: this function may only be implemented by caches that store objects
   * which have no counterpart stored in the drupal database which needs to be
   * later cleaned up.  Those caches must (at the moment) be add-only.
   *
   * @param string $key
   *   The primary index by which the object is stored
   *                     in the cache.
   * @param Context $context
   *   The context calling the function.  Used for version-specific cleanup.
   *
   * @return object|NULL      The object removed, or NULL if no object
   *                              was stored by that key in the cache.
   */
  public function remove($key, Context &$context);

}
