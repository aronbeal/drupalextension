<?php

/**
 * @file
 */
namespace Drupal\DrupalExtension\Context\Cache;
/**
 *  A simple class to store cached copies of created Drupal items,
 *  with indexing
 */
interface CacheInterface {
  /**
   * Purges any values of the given item's type from the Drupal
   * database.
   * @param  Drupal\DrupalExtension\Context $context The currently
   *                                                 executing context.
   * @throws  \Exception If any kind of error occurred during purging.
   */
  public function clean(&$context);
  /**
   * Adds an index to a given cache to speed searching by a particular
   * mechanism.  Any content subsequently added to this cache will be
   * indexed by the provided field in addition to its main index.
   * @param  string... $index_name One or more names of the indexes to add
   */
  public function addIndices();
  /**
   * Retrieves the cached value, if it exists.  The passed key must
   * be one of the indexed keys the item is stored under.
   *
   * @param  string  $key       The key the item is stored under
   * @return (mixed)
   *         Either the appropriate value for whatever type of
   *         cache is implementing this interface, or NULL if no
   *         such value is found.
   */
  public function get($key);
  /**
   * Sets a value in the cache.  The value will be indexed by
   * whatever field the class sets for $primary_key (class property,
   * as well as any other fields establisehed prior to the add call
   * via addIndices().
   * @param mixed $value  The type of value to be stored
   *                      depends on the implementing class.
   * @param array $options Additional options to be passed.  May
   *                       include the following:
   *                       'key': sets the key value to store this entry by.
   *                       If passed, this will bypass whatever the cache class
   *                       has set for a primary key for the type as the
   *                       primary method of indexing.  Make sure if you
   *                       pass this for one cache entry, you pass it for all,
   *                       or entries will be "lost".
   *
   */
  public function add(&$value, $options=array());

  /**
   * Finds an item in the cache that matches the described
   * set of options.  At a minimum, this should look at:
   *   a) The key generated by a serialization of the options array
   *   b) Any indices that can be determined by specific keys
   *   in the values array that match an implementing subclass'
   *   index list.
   *
   * @param  array  $values An array of key/value pairs describing
   *                         how to create an item of the type
   *                         managed by the cache.
   * @return An item of the type managed by the implementing
   *                 subclass, or NULL if no such item was found.
   */
  public function find($values=array());
  /**
   * Provides a count of items in this cache
   * @return int The number of items
   */
  public function count();
  /**
   * Provides a list of additional indices assigned to this cache.
   *
   * When an item is cached in this class, it is often indexed
   * by additional keys to aid in easy retrieval for different
   * scenarios.  This method returns a list of indices that
   * may be used for searching.
   * @return array An array of string indices
   */
  public function getNamedIndices();

}
